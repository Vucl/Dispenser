
Dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000550  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080006f8  080006f8  000106f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010710  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c67  00000000  00000000  00010740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000021b  00000000  00000000  000113a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000115c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00011640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018082  00000000  00000000  000116a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000740  00000000  00000000  00029722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087dea  00000000  00000000  00029e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b1c4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000134  00000000  00000000  000b1c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080006e0 	.word	0x080006e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080006e0 	.word	0x080006e0

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800024c:	d301      	bcc.n	8000252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800024e:	2301      	movs	r3, #1
 8000250:	e00f      	b.n	8000272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <SysTick_Config+0x40>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800025a:	210f      	movs	r1, #15
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	f7ff ffc2 	bl	80001e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <SysTick_Config+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <SysTick_Config+0x40>)
 800026c:	2207      	movs	r2, #7
 800026e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010

08000280 <main>:

//#define peripheralBitBandRegionBaseAdress
//#define advancedHardwareBus1PBA

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS; // 5 в latency
 8000284:	4b6f      	ldr	r3, [pc, #444]	; (8000444 <main+0x1c4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a6e      	ldr	r2, [pc, #440]	; (8000444 <main+0x1c4>)
 800028a:	f043 0305 	orr.w	r3, r3, #5
 800028e:	6013      	str	r3, [r2, #0]
	//RCC->CR |= 1<<16;  //устанавливаем 16-йбит для включения HSE
	RCC->CR |= RCC_CR_HSEON;
 8000290:	4b6d      	ldr	r3, [pc, #436]	; (8000448 <main+0x1c8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a6c      	ldr	r2, [pc, #432]	; (8000448 <main+0x1c8>)
 8000296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029a:	6013      	str	r3, [r2, #0]
	//RCC->CR |= 1<<0;  //устанавливаем 0-йбит для включения HSI
	while (!(RCC->CR & (1<<17))); //читаем сr ready пока не будет готов
 800029c:	bf00      	nop
 800029e:	4b6a      	ldr	r3, [pc, #424]	; (8000448 <main+0x1c8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <main+0x1e>

	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB в HPRE
 80002aa:	4b67      	ldr	r3, [pc, #412]	; (8000448 <main+0x1c8>)
 80002ac:	4a66      	ldr	r2, [pc, #408]	; (8000448 <main+0x1c8>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // APB1 в PPRE1
 80002b2:	4b65      	ldr	r3, [pc, #404]	; (8000448 <main+0x1c8>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a64      	ldr	r2, [pc, #400]	; (8000448 <main+0x1c8>)
 80002b8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // APB2 в PPRE2
 80002be:	4b62      	ldr	r3, [pc, #392]	; (8000448 <main+0x1c8>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a61      	ldr	r2, [pc, #388]	; (8000448 <main+0x1c8>)
 80002c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c8:	6093      	str	r3, [r2, #8]

	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLM_Msk;
 80002ca:	4b5f      	ldr	r3, [pc, #380]	; (8000448 <main+0x1c8>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a5e      	ldr	r2, [pc, #376]	; (8000448 <main+0x1c8>)
 80002d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLN_Msk;
 80002d6:	4b5c      	ldr	r3, [pc, #368]	; (8000448 <main+0x1c8>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a5b      	ldr	r2, [pc, #364]	; (8000448 <main+0x1c8>)
 80002dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80002e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002e4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLP_Msk;
 80002e6:	4b58      	ldr	r3, [pc, #352]	; (8000448 <main+0x1c8>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	4a57      	ldr	r2, [pc, #348]	; (8000448 <main+0x1c8>)
 80002ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002f0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLSRC_Msk;
 80002f2:	4b55      	ldr	r3, [pc, #340]	; (8000448 <main+0x1c8>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	4a54      	ldr	r2, [pc, #336]	; (8000448 <main+0x1c8>)
 80002f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002fc:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= 1<<24; // PLL_P selected as system clock

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80002fe:	4b52      	ldr	r3, [pc, #328]	; (8000448 <main+0x1c8>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	4a51      	ldr	r2, [pc, #324]	; (8000448 <main+0x1c8>)
 8000304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000308:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR |= 4<<0; //PLLM
 800030a:	4b4f      	ldr	r3, [pc, #316]	; (8000448 <main+0x1c8>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a4e      	ldr	r2, [pc, #312]	; (8000448 <main+0x1c8>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 168<<6; //PLLN
 8000316:	4b4c      	ldr	r3, [pc, #304]	; (8000448 <main+0x1c8>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	4a4b      	ldr	r2, [pc, #300]	; (8000448 <main+0x1c8>)
 800031c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000320:	6053      	str	r3, [r2, #4]
	//C->PLLCFGR |= 2<<0; //PLLP
	RCC->PLLCFGR |= 1<<22; //PLLSRC
 8000322:	4b49      	ldr	r3, [pc, #292]	; (8000448 <main+0x1c8>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	4a48      	ldr	r2, [pc, #288]	; (8000448 <main+0x1c8>)
 8000328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800032c:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= RCC_CFGR_SWS_PLL;

	RCC->CR |= RCC_CR_PLLON;
 800032e:	4b46      	ldr	r3, [pc, #280]	; (8000448 <main+0x1c8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a45      	ldr	r2, [pc, #276]	; (8000448 <main+0x1c8>)
 8000334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000338:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLON));
 800033a:	bf00      	nop
 800033c:	4b42      	ldr	r3, [pc, #264]	; (8000448 <main+0x1c8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <main+0xbc>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000348:	4b3f      	ldr	r3, [pc, #252]	; (8000448 <main+0x1c8>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a3e      	ldr	r2, [pc, #248]	; (8000448 <main+0x1c8>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6093      	str	r3, [r2, #8]

	RCC->AHB1ENR |= 0b11111111; //вкл все порты ввода-вывода
 8000354:	4b3c      	ldr	r3, [pc, #240]	; (8000448 <main+0x1c8>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a3b      	ldr	r2, [pc, #236]	; (8000448 <main+0x1c8>)
 800035a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= 0b11<<21; //вкл DMA, на всякий :|
 8000360:	4b39      	ldr	r3, [pc, #228]	; (8000448 <main+0x1c8>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a38      	ldr	r2, [pc, #224]	; (8000448 <main+0x1c8>)
 8000366:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800036a:	6313      	str	r3, [r2, #48]	; 0x30

	SysTick_Config(SysTicks);
 800036c:	4837      	ldr	r0, [pc, #220]	; (800044c <main+0x1cc>)
 800036e:	f7ff ff65 	bl	800023c <SysTick_Config>

	timInit();
 8000372:	f000 f87b 	bl	800046c <timInit>

	//*((uint32_t*)0x40023830)|=0b1001; // RCC_AHB1ENR GPIODEN GPIOAEN
	GPIOD->MODER |= (1<<24) | (1<<26) | (1<<28) | (1<<30); //пины leds на вывод
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <main+0x1d0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a35      	ldr	r2, [pc, #212]	; (8000450 <main+0x1d0>)
 800037c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000380:	6013      	str	r3, [r2, #0]
	//GPIOD->MODER |= 0x55000000;
	GPIOA->MODER &= ~(0b11<<0); // PA0 на вход
 8000382:	4b34      	ldr	r3, [pc, #208]	; (8000454 <main+0x1d4>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a33      	ldr	r2, [pc, #204]	; (8000454 <main+0x1d4>)
 8000388:	f023 0303 	bic.w	r3, r3, #3
 800038c:	6013      	str	r3, [r2, #0]

	//клавиатура настройка gpio
	//rows PD0..PD3
	GPIOD->MODER |= (1<<0) | (1<<2) | (1<<4) | (1<<6); //на вывод
 800038e:	4b30      	ldr	r3, [pc, #192]	; (8000450 <main+0x1d0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a2f      	ldr	r2, [pc, #188]	; (8000450 <main+0x1d0>)
 8000394:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000398:	6013      	str	r3, [r2, #0]
	//columns PD8..PD11
	GPIOD->MODER &= ~(0b11<<16) | ~(0b11<<18) | ~(0b11<<20) | ~(0b11<<22);
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <main+0x1d0>)
 800039c:	4a2c      	ldr	r2, [pc, #176]	; (8000450 <main+0x1d0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6013      	str	r3, [r2, #0]
	GPIOD->PUPDR |= (0b10<<16) | (0b10<<18) | (0b10<<20) | (0b10<<22);
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <main+0x1d0>)
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	4a2a      	ldr	r2, [pc, #168]	; (8000450 <main+0x1d0>)
 80003a8:	f443 032a 	orr.w	r3, r3, #11141120	; 0xaa0000
 80003ac:	60d3      	str	r3, [r2, #12]

	//настройка спящего
	SCB->SCR |= 1<<2; // разрешение sleepdeep
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <main+0x1d8>)
 80003b0:	691b      	ldr	r3, [r3, #16]
 80003b2:	4a29      	ldr	r2, [pc, #164]	; (8000458 <main+0x1d8>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6113      	str	r3, [r2, #16]
	PWR->CR |= PWR_CR_PDDS; // выбор Power Down Deepsleep
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <main+0x1dc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a27      	ldr	r2, [pc, #156]	; (800045c <main+0x1dc>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6013      	str	r3, [r2, #0]
	PWR->CR |= PWR_CR_CWUF; // очистка wakeup flag
 80003c6:	4b25      	ldr	r3, [pc, #148]	; (800045c <main+0x1dc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a24      	ldr	r2, [pc, #144]	; (800045c <main+0x1dc>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6013      	str	r3, [r2, #0]
	PWR->CSR |= PWR_CSR_EWUP; // разрешить вэйкап по еденице на А0
 80003d2:	4b22      	ldr	r3, [pc, #136]	; (800045c <main+0x1dc>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	4a21      	ldr	r2, [pc, #132]	; (800045c <main+0x1dc>)
 80003d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003dc:	6053      	str	r3, [r2, #4]
	//__WFE();

	GPIOD->ODR = 0xF000;
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <main+0x1d0>)
 80003e0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80003e4:	615a      	str	r2, [r3, #20]
		else {
			GPIOD->ODR &= ~(1<<15);
			TIM1->CCR1 = 94;
		}
		*/
		__asm("nop");
 80003e6:	bf00      	nop

		key = keyboard();
 80003e8:	f000 f8c2 	bl	8000570 <keyboard>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <main+0x1e0>)
 80003f2:	701a      	strb	r2, [r3, #0]
		//delay_ms(500);

		if (key != 0){
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <main+0x1e0>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d01c      	beq.n	8000436 <main+0x1b6>
			TIM1->CCR1 = 72;
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <main+0x1e4>)
 80003fe:	2248      	movs	r2, #72	; 0x48
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
			delay_ms(400*key);
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <main+0x1e0>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29b      	uxth	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	4413      	add	r3, r2
 800040e:	461a      	mov	r2, r3
 8000410:	0091      	lsls	r1, r2, #2
 8000412:	461a      	mov	r2, r3
 8000414:	460b      	mov	r3, r1
 8000416:	4413      	add	r3, r2
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	b29b      	uxth	r3, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f891 	bl	8000544 <delay_ms>
			TIM1->CCR1 = 94;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <main+0x1e4>)
 8000424:	225e      	movs	r2, #94	; 0x5e
 8000426:	635a      	str	r2, [r3, #52]	; 0x34
			key = 0;
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0x1e0>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
			counter = 0;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <main+0x1e8>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	e7d7      	b.n	80003e6 <main+0x166>
		}
		else { counter++; }
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <main+0x1e8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <main+0x1e8>)
 800043e:	6013      	str	r3, [r2, #0]
		__asm("nop");
 8000440:	e7d1      	b.n	80003e6 <main+0x166>
 8000442:	bf00      	nop
 8000444:	40023c00 	.word	0x40023c00
 8000448:	40023800 	.word	0x40023800
 800044c:	00029040 	.word	0x00029040
 8000450:	40020c00 	.word	0x40020c00
 8000454:	40020000 	.word	0x40020000
 8000458:	e000ed00 	.word	0xe000ed00
 800045c:	40007000 	.word	0x40007000
 8000460:	2000001e 	.word	0x2000001e
 8000464:	40010000 	.word	0x40010000
 8000468:	20000020 	.word	0x20000020

0800046c <timInit>:
		}*/
	}
}

void timInit()
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	GPIOE->MODER |= (0b10<<18); //PE9 альтернативная функция
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <timInit+0xa4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a26      	ldr	r2, [pc, #152]	; (8000510 <timInit+0xa4>)
 8000476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800047a:	6013      	str	r3, [r2, #0]
	GPIOE->AFR[1] |= (0b1<<4);  //тип альтернативной функции AF1 TIM1_CH1
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <timInit+0xa4>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	4a23      	ldr	r2, [pc, #140]	; (8000510 <timInit+0xa4>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOE->OTYPER = 0;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <timInit+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
	GPIOE->PUPDR |= (0b11<<18);
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <timInit+0xa4>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <timInit+0xa4>)
 8000494:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000498:	60d3      	str	r3, [r2, #12]
	//GPIOE->CRH &= ~GPIO_CRH_CNF9;
	//GPIOE->CRH |= GPIO_CRH_CNF9_1;

	RCC->APB2ENR =0xFF;
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <timInit+0xa8>)
 800049c:	22ff      	movs	r2, #255	; 0xff
 800049e:	645a      	str	r2, [r3, #68]	; 0x44

	TIM1->PSC = 3360-1; //предделитель 168МГц / 50Гц
 80004a0:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <timInit+0xac>)
 80004a2:	f640 521f 	movw	r2, #3359	; 0xd1f
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM1->CCMR1 |= TIM_CCMR1_OC1M;
	TIM1->ARR = 1000-1; //рег авто перегрузки (разряды от деления)
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <timInit+0xac>)
 80004aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 50; //коэф заполнения шим
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <timInit+0xac>)
 80004b2:	2232      	movs	r2, #50	; 0x32
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34

	TIM1->CCER |= TIM_CCER_CC1E; //вкл режим захвата/сравнения 1 канала
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <timInit+0xac>)
 80004b8:	6a1b      	ldr	r3, [r3, #32]
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <timInit+0xac>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6213      	str	r3, [r2, #32]
	TIM1->BDTR |= TIM_BDTR_MOE; //вывод таймера как выход
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <timInit+0xac>)
 80004c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <timInit+0xac>)
 80004c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004cc:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; //PWM mode 1, прямой ШИМ 1 канал
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <timInit+0xac>)
 80004d0:	2260      	movs	r2, #96	; 0x60
 80004d2:	619a      	str	r2, [r3, #24]
	TIM1->CR1 &= ~TIM_CR1_DIR; //вверх счёт
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <timInit+0xac>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <timInit+0xac>)
 80004da:	f023 0310 	bic.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~TIM_CR1_CMS; //выровнить по фронту
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <timInit+0xac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <timInit+0xac>)
 80004e6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80004ea:	6013      	str	r3, [r2, #0]

	TIM1->CR1 |= TIM_CR1_ARPE; // включить авто перегрузку
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <timInit+0xac>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <timInit+0xac>)
 80004f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f6:	6013      	str	r3, [r2, #0]

	//TIM1->CCR1
	//TIM1->DIER |= TIM_DIER_CC1IE; //прерывание захвата/сравнения
	//TIM4->SR |=
	TIM1->CR1 |= TIM_CR1_CEN; //включение таймера
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <timInit+0xac>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <timInit+0xac>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40023800 	.word	0x40023800
 8000518:	40010000 	.word	0x40010000

0800051c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	if (delay_count>0){delay_count--;}
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <SysTick_Handler+0x24>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d005      	beq.n	8000534 <SysTick_Handler+0x18>
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SysTick_Handler+0x24>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <SysTick_Handler+0x24>)
 8000532:	801a      	strh	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000001c 	.word	0x2000001c

08000544 <delay_ms>:

void delay_ms(uint16_t delay)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	delay_count = delay;
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <delay_ms+0x28>)
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	8013      	strh	r3, [r2, #0]
	while(delay_count) {};
 8000554:	bf00      	nop
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <delay_ms+0x28>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1fb      	bne.n	8000556 <delay_ms+0x12>
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	2000001c 	.word	0x2000001c

08000570 <keyboard>:

uint8_t keyboard (void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	71bb      	strb	r3, [r7, #6]
	uint8_t j = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	717b      	strb	r3, [r7, #5]

	for(i = 0; i <= 2; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	71bb      	strb	r3, [r7, #6]
 8000586:	e04d      	b.n	8000624 <keyboard+0xb4>
	{
		GPIOD->ODR |= 1<<i;
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <keyboard+0xc8>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	79ba      	ldrb	r2, [r7, #6]
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f202 	lsl.w	r2, r1, r2
 8000594:	4611      	mov	r1, r2
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <keyboard+0xc8>)
 8000598:	430b      	orrs	r3, r1
 800059a:	6153      	str	r3, [r2, #20]

		for(j = 0; j <= 2; j++)
 800059c:	2300      	movs	r3, #0
 800059e:	717b      	strb	r3, [r7, #5]
 80005a0:	e02f      	b.n	8000602 <keyboard+0x92>
		{
			if ((GPIOD->IDR & (1<<keysArrColumns[j])) != 0){
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <keyboard+0xc8>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	797a      	ldrb	r2, [r7, #5]
 80005a8:	4924      	ldr	r1, [pc, #144]	; (800063c <keyboard+0xcc>)
 80005aa:	5c8a      	ldrb	r2, [r1, r2]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4013      	ands	r3, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d021      	beq.n	80005fc <keyboard+0x8c>
				while ((GPIOD->IDR & (1<<keysArrColumns[j])) != 0)
 80005b8:	e005      	b.n	80005c6 <keyboard+0x56>
				{
					GPIOD->ODR |= 1<<15; // test led
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <keyboard+0xc8>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <keyboard+0xc8>)
 80005c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c4:	6153      	str	r3, [r2, #20]
				while ((GPIOD->IDR & (1<<keysArrColumns[j])) != 0)
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <keyboard+0xc8>)
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	797a      	ldrb	r2, [r7, #5]
 80005cc:	491b      	ldr	r1, [pc, #108]	; (800063c <keyboard+0xcc>)
 80005ce:	5c8a      	ldrb	r2, [r1, r2]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4013      	ands	r3, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1ee      	bne.n	80005ba <keyboard+0x4a>
				}
				GPIOD->ODR &= ~(1<<15); // test led
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <keyboard+0xc8>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a15      	ldr	r2, [pc, #84]	; (8000638 <keyboard+0xc8>)
 80005e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005e6:	6153      	str	r3, [r2, #20]
				result = keysArrNames[i][j];
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	7979      	ldrb	r1, [r7, #5]
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <keyboard+0xd0>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	4403      	add	r3, r0
 80005f6:	440b      	add	r3, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
		for(j = 0; j <= 2; j++)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	3301      	adds	r3, #1
 8000600:	717b      	strb	r3, [r7, #5]
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d9cc      	bls.n	80005a2 <keyboard+0x32>
			}
		}
		GPIOD->ODR &= ~(1<<i);
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <keyboard+0xc8>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	43d2      	mvns	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <keyboard+0xc8>)
 800061a:	400b      	ands	r3, r1
 800061c:	6153      	str	r3, [r2, #20]
	for(i = 0; i <= 2; i++)
 800061e:	79bb      	ldrb	r3, [r7, #6]
 8000620:	3301      	adds	r3, #1
 8000622:	71bb      	strb	r3, [r7, #6]
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d9ae      	bls.n	8000588 <keyboard+0x18>
	}

	return result;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40020c00 	.word	0x40020c00
 800063c:	08000704 	.word	0x08000704
 8000640:	080006f8 	.word	0x080006f8

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000648:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	; (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	; (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f000 f811 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff fe03 	bl	8000280 <main>

0800067a <LoopForever>:

LoopForever:
    b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000688:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 800068c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000690:	20000024 	.word	0x20000024

08000694 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC_IRQHandler>
	...

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	4d0d      	ldr	r5, [pc, #52]	; (80006d0 <__libc_init_array+0x38>)
 800069c:	4c0d      	ldr	r4, [pc, #52]	; (80006d4 <__libc_init_array+0x3c>)
 800069e:	1b64      	subs	r4, r4, r5
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	2600      	movs	r6, #0
 80006a4:	42a6      	cmp	r6, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	4d0b      	ldr	r5, [pc, #44]	; (80006d8 <__libc_init_array+0x40>)
 80006aa:	4c0c      	ldr	r4, [pc, #48]	; (80006dc <__libc_init_array+0x44>)
 80006ac:	f000 f818 	bl	80006e0 <_init>
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	2600      	movs	r6, #0
 80006b6:	42a6      	cmp	r6, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c0:	4798      	blx	r3
 80006c2:	3601      	adds	r6, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	4798      	blx	r3
 80006cc:	3601      	adds	r6, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	08000708 	.word	0x08000708
 80006d4:	08000708 	.word	0x08000708
 80006d8:	08000708 	.word	0x08000708
 80006dc:	0800070c 	.word	0x0800070c

080006e0 <_init>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr

080006ec <_fini>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr
