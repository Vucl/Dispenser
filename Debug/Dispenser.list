
Dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000520  08000528  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  4 .ARM          00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000520  08000528  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010528  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b61  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c8  00000000  00000000  000110b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00011288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  000112f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018082  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000652  00000000  00000000  000293d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087d9e  00000000  00000000  00029a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b17c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000010c  00000000  00000000  000b1814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000508 	.word	0x08000508

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000508 	.word	0x08000508

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800024c:	d301      	bcc.n	8000252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800024e:	2301      	movs	r3, #1
 8000250:	e00f      	b.n	8000272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <SysTick_Config+0x40>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800025a:	210f      	movs	r1, #15
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	f7ff ffc2 	bl	80001e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <SysTick_Config+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <SysTick_Config+0x40>)
 800026c:	2207      	movs	r2, #7
 800026e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010

08000280 <main>:

//#define peripheralBitBandRegionBaseAdress
//#define advancedHardwareBus1PBA

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS; // 5 в latency
 8000284:	4b50      	ldr	r3, [pc, #320]	; (80003c8 <main+0x148>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a4f      	ldr	r2, [pc, #316]	; (80003c8 <main+0x148>)
 800028a:	f043 0305 	orr.w	r3, r3, #5
 800028e:	6013      	str	r3, [r2, #0]
	//RCC->CR |= 1<<16;  //устанавливаем 16-йбит для включения HSE
	RCC->CR |= RCC_CR_HSEON;
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <main+0x14c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a4d      	ldr	r2, [pc, #308]	; (80003cc <main+0x14c>)
 8000296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029a:	6013      	str	r3, [r2, #0]
	//RCC->CR |= 1<<0;  //устанавливаем 0-йбит для включения HSI
	while (!(RCC->CR & (1<<17))); //читаем сr ready пока не будет готов
 800029c:	bf00      	nop
 800029e:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <main+0x14c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <main+0x1e>

	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB в HPRE
 80002aa:	4b48      	ldr	r3, [pc, #288]	; (80003cc <main+0x14c>)
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <main+0x14c>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // APB1 в PPRE1
 80002b2:	4b46      	ldr	r3, [pc, #280]	; (80003cc <main+0x14c>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a45      	ldr	r2, [pc, #276]	; (80003cc <main+0x14c>)
 80002b8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; // APB2 в PPRE2
 80002be:	4b43      	ldr	r3, [pc, #268]	; (80003cc <main+0x14c>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a42      	ldr	r2, [pc, #264]	; (80003cc <main+0x14c>)
 80002c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c8:	6093      	str	r3, [r2, #8]

	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLM_Msk;
 80002ca:	4b40      	ldr	r3, [pc, #256]	; (80003cc <main+0x14c>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a3f      	ldr	r2, [pc, #252]	; (80003cc <main+0x14c>)
 80002d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLN_Msk;
 80002d6:	4b3d      	ldr	r3, [pc, #244]	; (80003cc <main+0x14c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a3c      	ldr	r2, [pc, #240]	; (80003cc <main+0x14c>)
 80002dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80002e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002e4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLP_Msk;
 80002e6:	4b39      	ldr	r3, [pc, #228]	; (80003cc <main+0x14c>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	4a38      	ldr	r2, [pc, #224]	; (80003cc <main+0x14c>)
 80002ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002f0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~ RCC_PLLCFGR_PLLSRC_Msk;
 80002f2:	4b36      	ldr	r3, [pc, #216]	; (80003cc <main+0x14c>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	4a35      	ldr	r2, [pc, #212]	; (80003cc <main+0x14c>)
 80002f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002fc:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= 1<<24; // PLL_P selected as system clock

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80002fe:	4b33      	ldr	r3, [pc, #204]	; (80003cc <main+0x14c>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	4a32      	ldr	r2, [pc, #200]	; (80003cc <main+0x14c>)
 8000304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000308:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR |= 4<<0; //PLLM
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <main+0x14c>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <main+0x14c>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 168<<6; //PLLN
 8000316:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <main+0x14c>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	4a2c      	ldr	r2, [pc, #176]	; (80003cc <main+0x14c>)
 800031c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000320:	6053      	str	r3, [r2, #4]
	//C->PLLCFGR |= 2<<0; //PLLP
	RCC->PLLCFGR |= 1<<22; //PLLSRC
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <main+0x14c>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	4a29      	ldr	r2, [pc, #164]	; (80003cc <main+0x14c>)
 8000328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800032c:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= RCC_CFGR_SWS_PLL;

	RCC->CR |= RCC_CR_PLLON;
 800032e:	4b27      	ldr	r3, [pc, #156]	; (80003cc <main+0x14c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a26      	ldr	r2, [pc, #152]	; (80003cc <main+0x14c>)
 8000334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000338:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLON));
 800033a:	bf00      	nop
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <main+0x14c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <main+0xbc>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <main+0x14c>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <main+0x14c>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6093      	str	r3, [r2, #8]

	//RCC->AHB1ENR |= 0b11111111; //вкл все порты ввода-вывода
	RCC->AHB1ENR |= 0b11<<21; //вкл DMA, на всякий :|
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <main+0x14c>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <main+0x14c>)
 800035a:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 800035e:	6313      	str	r3, [r2, #48]	; 0x30

	SysTick_Config(SysTicks);
 8000360:	481b      	ldr	r0, [pc, #108]	; (80003d0 <main+0x150>)
 8000362:	f7ff ff6b 	bl	800023c <SysTick_Config>

	timInit();
 8000366:	f000 f83b 	bl	80003e0 <timInit>

	*((uint32_t*)0x40023830)|=0b1001; // RCC_AHB1ENR GPIODEN GPIOAEN
 800036a:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <main+0x154>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <main+0x154>)
 8000370:	f043 0309 	orr.w	r3, r3, #9
 8000374:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<24) | (1<<26) | (1<<28) | (1<<30); //пины leds на вывод
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <main+0x158>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <main+0x158>)
 800037c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000380:	6013      	str	r3, [r2, #0]
	//GPIOD->MODER |= 0x55000000;
	GPIOA->MODER &= ~(0b11<<0); // PA0 на вход
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0x15c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a15      	ldr	r2, [pc, #84]	; (80003dc <main+0x15c>)
 8000388:	f023 0303 	bic.w	r3, r3, #3
 800038c:	6013      	str	r3, [r2, #0]

	GPIOD->ODR = 0xF000;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <main+0x158>)
 8000390:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000394:	615a      	str	r2, [r3, #20]
	while(28)
	{

		if ((GPIOA->IDR & (1<<0)) != 0){
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <main+0x15c>)
 8000398:	691b      	ldr	r3, [r3, #16]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00a      	beq.n	80003b8 <main+0x138>
			GPIOD->ODR |= 1<<15;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <main+0x158>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a0c      	ldr	r2, [pc, #48]	; (80003d8 <main+0x158>)
 80003a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003ac:	6153      	str	r3, [r2, #20]
			delay_ms(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f000 f845 	bl	8000440 <delay_ms>
 80003b6:	e005      	b.n	80003c4 <main+0x144>
		}
		else {
			GPIOD->ODR &= ~(1<<15);
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <main+0x158>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <main+0x158>)
 80003be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003c2:	6153      	str	r3, [r2, #20]
		}

		__asm("nop");
 80003c4:	bf00      	nop
		if ((GPIOA->IDR & (1<<0)) != 0){
 80003c6:	e7e6      	b.n	8000396 <main+0x116>
 80003c8:	40023c00 	.word	0x40023c00
 80003cc:	40023800 	.word	0x40023800
 80003d0:	00029040 	.word	0x00029040
 80003d4:	40023830 	.word	0x40023830
 80003d8:	40020c00 	.word	0x40020c00
 80003dc:	40020000 	.word	0x40020000

080003e0 <timInit>:
	}
}

void timInit()
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	TIM4->CR1 |= TIM_CR1_ARPE; // включить авто перегрузку
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <timInit+0x34>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <timInit+0x34>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ee:	6013      	str	r3, [r2, #0]
	TIM4->CCER |= TIM_CCER_CC1E; //вкл режим захвата/сравнения
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <timInit+0x34>)
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <timInit+0x34>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= TIM_CR1_CEN; //включение таймера
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <timInit+0x34>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <timInit+0x34>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]

}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40000800 	.word	0x40000800

08000418 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	if (delay_count>0){delay_count--;}
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <SysTick_Handler+0x24>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d005      	beq.n	8000430 <SysTick_Handler+0x18>
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Handler+0x24>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <SysTick_Handler+0x24>)
 800042e:	801a      	strh	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	2000001c 	.word	0x2000001c

08000440 <delay_ms>:

void delay_ms(uint16_t delay)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	80fb      	strh	r3, [r7, #6]
	delay_count = delay;
 800044a:	4a07      	ldr	r2, [pc, #28]	; (8000468 <delay_ms+0x28>)
 800044c:	88fb      	ldrh	r3, [r7, #6]
 800044e:	8013      	strh	r3, [r2, #0]
	while(delay_count) {};
 8000450:	bf00      	nop
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <delay_ms+0x28>)
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d1fb      	bne.n	8000452 <delay_ms+0x12>
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	2000001c 	.word	0x2000001c

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	; (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	; (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f811 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff feef 	bl	8000280 <main>

080004a2 <LoopForever>:

LoopForever:
    b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b0:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b8:	20000020 	.word	0x20000020

080004bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4d0d      	ldr	r5, [pc, #52]	; (80004f8 <__libc_init_array+0x38>)
 80004c4:	4c0d      	ldr	r4, [pc, #52]	; (80004fc <__libc_init_array+0x3c>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	2600      	movs	r6, #0
 80004cc:	42a6      	cmp	r6, r4
 80004ce:	d109      	bne.n	80004e4 <__libc_init_array+0x24>
 80004d0:	4d0b      	ldr	r5, [pc, #44]	; (8000500 <__libc_init_array+0x40>)
 80004d2:	4c0c      	ldr	r4, [pc, #48]	; (8000504 <__libc_init_array+0x44>)
 80004d4:	f000 f818 	bl	8000508 <_init>
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	2600      	movs	r6, #0
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d105      	bne.n	80004ee <__libc_init_array+0x2e>
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
 80004e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e8:	4798      	blx	r3
 80004ea:	3601      	adds	r6, #1
 80004ec:	e7ee      	b.n	80004cc <__libc_init_array+0xc>
 80004ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f2:	4798      	blx	r3
 80004f4:	3601      	adds	r6, #1
 80004f6:	e7f2      	b.n	80004de <__libc_init_array+0x1e>
 80004f8:	08000520 	.word	0x08000520
 80004fc:	08000520 	.word	0x08000520
 8000500:	08000520 	.word	0x08000520
 8000504:	08000524 	.word	0x08000524

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <_fini>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr
